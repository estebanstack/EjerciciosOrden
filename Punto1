package Ejercicios;

public class Ejercicio1 {
    static int[] codigo = new int[4];
    static double[][] notas = new double[4][4];
    static String[] nombres = new String[4];

    public static void main(String[] args) {
        llenarDatos(codigo, notas, nombres);
        mostrar();
        ordenamientoPorSeleccion(codigo, nombres,notas);
        mostrar();






    }

    public static void llenarDatos(int[] codigo, double[][] notas, String[] nombre) {
        for (int i = 0; i < 4; i++) {
            codigo[i] = (int) (Math.random() * 1999 +1000 );
            nombre[i] = "est" + (i + 1);
            for (int j = 0; j < 4; j++) {
                notas[i][j] = Math.random() * 5.0;

            }
            notas[i][3] = (notas[i][0] * 0.3) + (notas[i][1] * 0.3) + (notas[i][2] * 0.4);
        }
    }
    
        public static void ordenamientoPorSeleccion(int[] codigo, String[] nombre, double[][] notas) {
            int n = codigo.length;

            // Recorremos la codigo
            for (int i = 0; i < n; i++) {
                // Suponemos que el mínimo es el primer elemento sin ordenar
                int indiceMinimo = i;

                // Recorremos el resto de la codigo para encontrar el mínimo
                for (int j = i + 1; j < n; j++) {
                    if (codigo[j] < codigo[indiceMinimo]) {  // Cambié el signo para ordenar de menor a mayor
                        indiceMinimo = j;
                    }
                }

                // Intercambiamos el elemento mínimo encontrado con el primero
                int tempC = codigo[i];
                String tempN = nombre[i];
                codigo[i] = codigo[indiceMinimo];
                nombre[i] = nombre[indiceMinimo];
                codigo[indiceMinimo] = tempC;
                nombre[indiceMinimo] = tempN;

            }


        }
        

        public static int busquedaBinaria(int[] arreglo, int objetivo) {
        int izquierda = 0;
        int derecha = arreglo.length - 1;

        while (izquierda <= derecha) {
            int medio = izquierda + (derecha - izquierda) / 2;

            // Verificamos si el objetivo está en la posición media
            if (arreglo[medio] == objetivo) {
                return medio; // El objetivo fue encontrado
            }

            // Si el objetivo es mayor que el valor en la posición media
            if (arreglo[medio] < objetivo) {
                izquierda = medio + 1;
            }
            // Si el objetivo es menor que el valor en la posición media
            else {
                derecha = medio - 1;
            }
        }

        // Si el objetivo no está en el arreglo, se retorna -1
        return -1;
    }

    public static void mostrar(){
        for (int i = 0; i < 4; i++) {
            System.out.print( codigo[i]+ " ");
            System.out.print( nombres[i] +" ");

        }
        System.out.println();
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                System.out.println(notas[i][j]);
            }
            System.out.println("estudiante " + i);
        }
    }


}
